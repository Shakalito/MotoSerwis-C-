@page "/Clients"
@attribute [StreamRendering]
@rendermode InteractiveServer

@using MotoSerwis.Data
@using MotoSerwis.Data.Entities
@using Microsoft.EntityFrameworkCore
@inject NavigationManager Navigation
@inject ApplicationDbContext DbContext

<h1>Klienci</h1>

<div class="d-flex justify-content-between mb-3">
    <input type="text" class="form-control w-50"
           placeholder="Szukaj po marce lub modelu..."
           @oninput="HandleSearchInput" value="@searchTerm" />
    <NavLink class="btn btn-primary" href="Client/Add">Dodaj</NavLink>
</div>

@if (clients == null)
{
    <p><em>Ładowanie...</em></p>
}
else
{
    <table class="table table-hover">
        <thead>
            <tr>
                <th>Id</th>
                <th>Imię</th>
                <th>Nazwisko</th>
                <th>Adres</th>
                <th>Numer telefonu</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var client in clients)
            {
                <tr style="cursor: pointer;" @onclick="@(() => NavigateToDetails(client.Id))">
                    <td>@client.Id</td>
                    <td>@client.FirstName</td>
                    <td>@client.LastName</td>
                    <td>@client.Address</td>
                    <td>@client.PhoneNumber</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<Client> clients = new();
    private string searchTerm = string.Empty;

    private void NavigateToDetails(int id)
    {
        Navigation.NavigateTo($"/Client/Details/{id}");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadClientsAsync();
    }

    private async Task LoadClientsAsync()
    {
        clients = await DbContext.Clients
            .Where(c => c.FirstName.Contains(searchTerm) || c.LastName.Contains(searchTerm))
            .OrderBy(c => c.LastName)
            .ToListAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await LoadClientsAsync();
    }

    private async Task HandleSearchInput(ChangeEventArgs e)
    {
        searchTerm = e.Value?.ToString() ?? string.Empty;
        await LoadClientsAsync();
    }

    private class ClientListItem
    {
        public int Id { get; set; }
        public string? FirstName { get; set; }
        public string? LastName { get; set; }
        public string? Address { get; set; }
        public string? PhoneNumber { get; set; }
    }
}
